//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by ONts.DataItems.Ooxml.Cpp.OoxmlToCppConverter.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma once

#include "Simulation\CsItems.h"

namespace radarmap_29k
	{
	using namespace Simulation;
	
	///	Доступные данные CommunicationServer.
	struct CsItems
		{
		///	Группа данных CS CS.Requests
		struct RequestsCsItem	
			{	
		
			///	Группа данных CS CS.Requests.Monitor4
			struct Monitor4CsItem	
				{	
			
				///	Группа данных CS CS.Requests.Monitor4.Current
				struct CurrentCsItem : public InOutItem<INT>	
					{	
					CurrentCsItem() 
						: InOutItem("Tv.Requests.Monitor.4.Current", 0, 0)
						{
						}
							
					operator const INT&() { return GetValue(); }
					const INT* operator->() { return &GetValue();	}
				      InOutItem<INT>& operator =(const INT& newValue)
				        {
				        SetValue(newValue);
				        return *this;
				        }	
				
					};
				
				///@note	Tv.Capturing.OutputDeviceType
				CurrentCsItem Current;
				
				///	Группа данных CS CS.Requests.Monitor4.Required
				struct RequiredCsItem : public InOutItem<INT>	
					{	
					RequiredCsItem() 
						: InOutItem("Tv.Requests.Monitor.4.Required", 0, 0)
						{
						}
							
					operator const INT&() { return GetValue(); }
					const INT* operator->() { return &GetValue();	}
				      InOutItem<INT>& operator =(const INT& newValue)
				        {
				        SetValue(newValue);
				        return *this;
				        }	
				
					};
				
				///@note	Tv.Capturing.OutputDeviceType
				RequiredCsItem Required;
				
				};
			
			///	Группа данных CS CS.Requests.Monitor4
			Monitor4CsItem Monitor4;
			
			///	Группа данных CS CS.Requests.Monitor5
			struct Monitor5CsItem	
				{	
			
				///	Группа данных CS CS.Requests.Monitor5.Current
				struct CurrentCsItem : public InOutItem<INT>	
					{	
					CurrentCsItem() 
						: InOutItem("Tv.Requests.Monitor.5.Current", 0, 0)
						{
						}
							
					operator const INT&() { return GetValue(); }
					const INT* operator->() { return &GetValue();	}
				      InOutItem<INT>& operator =(const INT& newValue)
				        {
				        SetValue(newValue);
				        return *this;
				        }	
				
					};
				
				///@note	Tv.Capturing.OutputDeviceType
				CurrentCsItem Current;
				
				///	Группа данных CS CS.Requests.Monitor5.Required
				struct RequiredCsItem : public InOutItem<INT>	
					{	
					RequiredCsItem() 
						: InOutItem("Tv.Requests.Monitor.5.Required", 0, 0)
						{
						}
							
					operator const INT&() { return GetValue(); }
					const INT* operator->() { return &GetValue();	}
				      InOutItem<INT>& operator =(const INT& newValue)
				        {
				        SetValue(newValue);
				        return *this;
				        }	
				
					};
				
				///@note	Tv.Capturing.OutputDeviceType
				RequiredCsItem Required;
				
				};
			
			///	Группа данных CS CS.Requests.Monitor5
			Monitor5CsItem Monitor5;
			
			///	Группа данных CS CS.Requests.Monitor6
			struct Monitor6CsItem	
				{	
			
				///	Группа данных CS CS.Requests.Monitor6.Current
				struct CurrentCsItem : public InOutItem<INT>	
					{	
					CurrentCsItem() 
						: InOutItem("Tv.Requests.Monitor.6.Current", 0, 0)
						{
						}
							
					operator const INT&() { return GetValue(); }
					const INT* operator->() { return &GetValue();	}
				      InOutItem<INT>& operator =(const INT& newValue)
				        {
				        SetValue(newValue);
				        return *this;
				        }	
				
					};
				
				///@note	Tv.Capturing.OutputDeviceType
				CurrentCsItem Current;
				
				///	Группа данных CS CS.Requests.Monitor6.Required
				struct RequiredCsItem : public InOutItem<INT>	
					{	
					RequiredCsItem() 
						: InOutItem("Tv.Requests.Monitor.6.Required", 0, 0)
						{
						}
							
					operator const INT&() { return GetValue(); }
					const INT* operator->() { return &GetValue();	}
				      InOutItem<INT>& operator =(const INT& newValue)
				        {
				        SetValue(newValue);
				        return *this;
				        }	
				
					};
				
				///@note	Tv.Capturing.OutputDeviceType
				RequiredCsItem Required;
				
				};
			
			///	Группа данных CS CS.Requests.Monitor6
			Monitor6CsItem Monitor6;
			
			///	Группа данных CS CS.Requests.Monitor7
			struct Monitor7CsItem	
				{	
			
				///	Группа данных CS CS.Requests.Monitor7.Current
				struct CurrentCsItem : public InOutItem<INT>	
					{	
					CurrentCsItem() 
						: InOutItem("Tv.Requests.Monitor.7.Current", 0, 0)
						{
						}
							
					operator const INT&() { return GetValue(); }
					const INT* operator->() { return &GetValue();	}
				      InOutItem<INT>& operator =(const INT& newValue)
				        {
				        SetValue(newValue);
				        return *this;
				        }	
				
					};
				
				///@note	Tv.Capturing.OutputDeviceType
				CurrentCsItem Current;
				
				///	Группа данных CS CS.Requests.Monitor7.Required
				struct RequiredCsItem : public InOutItem<INT>	
					{	
					RequiredCsItem() 
						: InOutItem("Tv.Requests.Monitor.7.Required", 0, 0)
						{
						}
							
					operator const INT&() { return GetValue(); }
					const INT* operator->() { return &GetValue();	}
				      InOutItem<INT>& operator =(const INT& newValue)
				        {
				        SetValue(newValue);
				        return *this;
				        }	
				
					};
				
				///@note	Tv.Capturing.OutputDeviceType
				RequiredCsItem Required;
				
				};
			
			///	Группа данных CS CS.Requests.Monitor7
			Monitor7CsItem Monitor7;
			
			};
		
		///	Группа данных CS CS.Requests
		RequestsCsItem Requests;
		
		///	Группа данных CS CS.Targeting
		struct TargetingCsItem	
			{	
		
			///	Группа данных CS CS.Targeting.Radar
			struct RadarCsItem	
				{	
			
				///	Группа данных CS CS.Targeting.Radar.Map
				struct MapCsItem	
					{	
				
					///	Группа данных CS CS.Targeting.Radar.Map.Control
					struct ControlCsItem	
						{	
					
						///	Группа данных CS CS.Targeting.Radar.Map.Control.Out
						struct OutCsItem : public InItem<radarmap_29k::TRadarMapOut>	
							{	
							OutCsItem() 
								: InItem("RADAR_MAP_PARAMS", 96, 0)
								{
								}
									
							operator const radarmap_29k::TRadarMapOut&() { return GetValue(); }
							const radarmap_29k::TRadarMapOut* operator->() { return &GetValue();	}
						
							};
						
						OutCsItem Out;
						
						///	Группа данных CS CS.Targeting.Radar.Map.Control.Ready
						struct ReadyCsItem : public InOutItem<INT>	
							{	
							ReadyCsItem() 
								: InOutItem("RADAR_MAP_PARAMS", 96, 88)
								{
								}
									
							operator const INT&() { return GetValue(); }
							const INT* operator->() { return &GetValue();	}
						      InOutItem<INT>& operator =(const INT& newValue)
						        {
						        SetValue(newValue);
						        return *this;
						        }	
						
							};
						
						ReadyCsItem Ready;
						
						};
					
					///	Группа данных CS CS.Targeting.Radar.Map.Control
					ControlCsItem Control;
					
					///	Группа данных CS CS.Targeting.Radar.Map.Mode
					struct ModeCsItem : public InItem<UINT>	
						{	
						ModeCsItem() 
							: InItem("Dispatcher.Targeting.Radar.Map.Mode", 0, 0)
							{
							}
								
						operator const UINT&() { return GetValue(); }
						const UINT* operator->() { return &GetValue();	}
					
						};
					
					///	Режим картографирования
					///@note	radarmap.RadarMapMode
					ModeCsItem Mode;
					
					};
				
				///	Группа данных CS CS.Targeting.Radar.Map
				MapCsItem Map;
				
				};
			
			///	Группа данных CS CS.Targeting.Radar
			RadarCsItem Radar;
			
			};
		
		///	Группа данных CS CS.Targeting
		TargetingCsItem Targeting;
		
		///	Группа данных CS CS.VideoChannels
		struct VideoChannelsCsItem	
			{	
		
			///	Группа данных CS CS.VideoChannels.Generator
			struct GeneratorCsItem	
				{	
			
				///	Группа данных CS CS.VideoChannels.Generator.Required
				struct RequiredCsItem : public InOutList<UINT>	
					{	
					RequiredCsItem() 
						: InOutList("VideoChannels.Generator.Required", 0, 0)
						{
						}
				
					};
				
				///	Запрос изображения на области экрана генератора графики, список по номерам в конфигурационном файле
				///@note	virtualdevices_29k.VirtualDeviceType
				RequiredCsItem Required;
				
				///	Группа данных CS CS.VideoChannels.Generator.Current
				struct CurrentCsItem : public InOutList<UINT>	
					{	
					CurrentCsItem() 
						: InOutList("VideoChannels.Generator.Current", 0, 0)
						{
						}
				
					};
				
				///	Текущее изображение на области экрана генератора графики, список по номерам в конфигурационном файле
				///@note	virtualdevices_29k.VirtualDeviceType
				CurrentCsItem Current;
				
				};
			
			///	Группа данных CS CS.VideoChannels.Generator
			GeneratorCsItem Generator;
			
			};
		
		///	Группа данных CS CS.VideoChannels
		VideoChannelsCsItem VideoChannels;
		
		///	Группа данных CS CS.SCENARIO_OBJECTS_DATA
		struct SCENARIO_OBJECTS_DATACsItem : public InItem<graph_29k::TActiveObjects2>	
			{	
			SCENARIO_OBJECTS_DATACsItem() 
				: InItem("SCENARIO_OBJECTS_DATA", 0, 0)
				{
				}
					
			operator const graph_29k::TActiveObjects2&() { return GetValue(); }
			const graph_29k::TActiveObjects2* operator->() { return &GetValue();	}
		
			};
		
		///	Активные объекты
		SCENARIO_OBJECTS_DATACsItem SCENARIO_OBJECTS_DATA;
		

				};
			
			/// Доступ к данным CS.
			template<int ID>
			class Dependency<radarmap_29k::CsItems, ID>
				{
				public:
				static radarmap_29k::CsItems &Fetch()
					{
					static radarmap_29k::CsItems val;
					return val;
					}
			
				static bool IsAvailable()
					{
					return true;
					}
				};		
			};
